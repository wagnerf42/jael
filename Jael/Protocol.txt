*************************************************************************************
SPAWN DE TACHE DANS PILE

lorsqu'une tache T_i est poussee dans la pile par P_j
envoi a DHT_OWNER(T_i) : T_i est sur moi                                           11
*************************************************************************************
FIN CALCUL TACHE

fin du calcul d'une tache T1 par P_j:
envoi 'I computed ID_TASK' vers DHT_OWNER(T1)                                       1
mise a jour du statut local de T1
DHT_OWNER(T1) calcule quelles taches (par exemple T2, T3) dependent de T1
DHT_OWNER(T1) note que P_j possede la donnee associee a T1
il calcule les owner de chaque tache : DHT_OWNER(T2) et DHT_OWNER(T3)
et leur envoie un message
'ID_TASK completed'
                                                                                    2
si une tache T_i devient 'ready'
alors DHT_OWNER(T_i) envoi au possesseur de la tache T_i
'T_i is now ready'
                                                                                    3
le possesseur active la tache dans sa        pile locale (passage a ready_waiting ou ready)

*************************************************************************************
CHERCHER DONNEE

chercher a trouver qui possede la donnee de la tache T_i :
envoi 'looking for T_i' vers DHT_OWNER(T_i)                                         4
reponse 'T_i available on [ID_COMP list]'                                           5
*************************************************************************************
# CHERCHER FICHIER

p_j veut faire une requete de fichier pour le fichier de la tache T_i
envoi 'file request T_i' vers p_k qui possede le fichier                           15
reponse: p_k envoi le fichier vers p_j (file basse priorite)                       16
informer que l'on possede des donnees :
envoi 'we obtained T_i' vers DHT_OWNER(T_i)                                         6
sur recepetion du msg le dht_owner rajoute p_j dans la liste des gens possedant le
fichier

*************************************************************************************
FIN DE CALCUL

informer de la fin des calculs :
lorsque la derniere tache T_i est finie
par le processus P_j

envoi 'ending' vers tous sauf P0                                                    7
envoi du fichier de fin de T_i a P0 (en basse)                                     18
lorsque P0 a recu le fichier il envoi 'ending' (7) a P_j
et quitte
sur reception de 'ending' : quitter
*************************************************************************************
# BROADCAT GRAPHE

au demarrage P0 envoie le graphe a tous
broadcast du message 'taskgraph graph'                                             17

*************************************************************************************
# VOL DE TACHES

P_j n'a plus de travail ready* dans la pile
faire une requete de vol :
envoi 'steal request' vers un P_k aleatoire different de P_j                        8
reponse 'nothing to steal' vers source si rien a prendre                            9
si qqch a prendre
reponse de P_k : 'you can steal T_i' vers P_j                                      10
P_k enleve la tache T_i de sa pile
P_j ajoute la tache T_i dans sa pile

*************************************************************************************
# REQUETES DE FORK

faire une requete de fork :
envoi 'fork request ID_TASK' vers DHT_OWNER(ID_TASK)                               12
si ok:
 envoi 'fork accepted for ID_TASK' vers source                                     13
si non:
 envoi 'fork refused for ID_TASK' vers source                                      14
mise a jour de l'info en local (+details a venir)


---------------------------------------------------------------
***********
A VERIFIER*
***********
types d'arguments :

 - ID_TASK : 1,2,3,4,6,10,11,12,13,14,15
 - ID_TASK, NB_COMP, COMP_LIST[NB_COMP] : 5
 - nothing : 7, 8, 9
 - data : 16

types de reactions (reseau) possibles

 - ne rien repondre : 3, 5, 6, 7, 9, 11, 13, 14, 16
 - repondre a owner(ID_TASK) : 1,

types de reactions (locales) possibles

